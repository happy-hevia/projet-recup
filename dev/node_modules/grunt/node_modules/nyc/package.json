{
  "_args": [
    [
      "nyc@github:isaacs/nyc",
      "C:\\wamp\\www\\aaa\\dev\\node_modules\\grunt\\node_modules\\tap"
    ]
  ],
  "_from": "isaacs/nyc",
  "_id": "nyc@5.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/nyc",
  "_phantomChildren": {
    "brace-expansion": "1.1.2",
    "inflight": "1.0.4",
    "inherits": "2.0.1",
    "once": "1.3.3",
    "path-is-absolute": "1.0.0"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/isaacs/nyc/master/package.json",
      "gitUrl": "git://github.com/isaacs/nyc.git",
      "httpsUrl": "git+https://github.com/isaacs/nyc.git",
      "shortcut": "github:isaacs/nyc",
      "ssh": "git@github.com:isaacs/nyc.git",
      "sshUrl": "git+ssh://git@github.com/isaacs/nyc.git",
      "type": "github"
    },
    "name": "nyc",
    "raw": "nyc@github:isaacs/nyc",
    "rawSpec": "github:isaacs/nyc",
    "scope": null,
    "spec": "github:isaacs/nyc",
    "type": "hosted"
  },
  "_requiredBy": [
    "/tap"
  ],
  "_resolved": "git://github.com/isaacs/nyc.git#b43f1dbef1892af89dfa2f9a9e662381cddb2d1f",
  "_shasum": "d18536c09f31f0e29fac25f7739df0efd9b76a8a",
  "_shrinkwrap": null,
  "_spec": "nyc@github:isaacs/nyc",
  "_where": "C:\\wamp\\www\\aaa\\dev\\node_modules\\grunt\\node_modules\\tap",
  "author": {
    "email": "ben@npmjs.com",
    "name": "Ben Coe"
  },
  "bin": {
    "nyc": "./bin/nyc.js"
  },
  "bugs": {
    "url": "https://github.com/bcoe/nyc/issues"
  },
  "contributors": [
    {
      "name": "Isaac Schlueter"
    },
    {
      "name": "Ollie Buck"
    }
  ],
  "dependencies": {
    "append-transform": "^0.2.0",
    "arrify": "^1.0.1",
    "caching-transform": "^1.0.0",
    "convert-source-map": "^1.1.2",
    "find-cache-dir": "^0.1.1",
    "foreground-child": "^1.3.4",
    "glob": "^6.0.2",
    "istanbul": "^0.4.1",
    "md5-hex": "^1.2.0",
    "micromatch": "~2.1.6",
    "mkdirp": "^0.5.0",
    "pkg-up": "^1.0.0",
    "read-pkg": "^1.1.0",
    "resolve-from": "^2.0.0",
    "rimraf": "^2.5.0",
    "signal-exit": "^2.1.1",
    "source-map": "^0.5.3",
    "spawn-wrap": "^1.1.1",
    "strip-bom": "^2.0.0",
    "yargs": "^3.15.0"
  },
  "description": "a code coverage tool that works well with subprocesses.",
  "devDependencies": {
    "any-path": "^1.3.0",
    "chai": "^3.0.0",
    "coveralls": "^2.11.4",
    "forking-tap": "^0.1.1",
    "is-windows": "^0.1.0",
    "lodash": "^3.10.0",
    "newline-regex": "^0.2.1",
    "sanitize-filename": "^1.5.3",
    "sinon": "^1.15.3",
    "source-map-fixtures": "^0.4.0",
    "source-map-support": "^0.4.0",
    "split-lines": "^1.0.0",
    "standard": "^5.2.1",
    "tap": "^2.3.4",
    "zero-fill": "^2.2.1"
  },
  "files": [
    "!**/*covered.js",
    "bin/*.js",
    "index.js",
    "lib/*.js"
  ],
  "gitHead": "b43f1dbef1892af89dfa2f9a9e662381cddb2d1f",
  "homepage": "https://github.com/bcoe/nyc#readme",
  "keywords": [
    "coverage",
    "reporter",
    "subprocess",
    "testing"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "nyc",
  "nyc": {
    "exclude": [
      "bin",
      "coverage",
      "index.covered.js",
      "node_modules",
      "test/build/*",
      "test/fixtures/_generateCoverage.js",
      "test/fixtures/coverage.js",
      "test/nyc-test.js",
      "test/source-map-cache.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# nyc\r\n\r\n[![Build Status](https://travis-ci.org/bcoe/nyc.png)](https://travis-ci.org/bcoe/nyc)\r\n[![Coverage Status](https://coveralls.io/repos/bcoe/nyc/badge.svg?branch=)](https://coveralls.io/r/bcoe/nyc?branch=)\r\n[![NPM version](https://img.shields.io/npm/v/nyc.svg)](https://www.npmjs.com/package/nyc)\r\n[![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/nyc/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/nyc)\r\n\r\na code coverage tool built on [istanbul](https://www.npmjs.com/package/istanbul)\r\nthat works for applications that spawn subprocesses.\r\n\r\n## Instrumenting Your Code\r\n\r\nYou can install nyc as a development dependency and add it to the test stanza\r\nin your package.json.\r\n\r\n```shell\r\nnpm i nyc --save-dev\r\n```\r\n\r\n```json\r\n{\r\n  \"script\": {\r\n    \"test\": \"nyc tap ./test/*.js\"\r\n  }\r\n}\r\n```\r\n\r\nAlternatively, you can install nyc globally and use it to execute `npm test`:\r\n\r\n```shell\r\nnpm i nyc -g\r\n```\r\n\r\n```shell\r\nnyc npm test\r\n```\r\n\r\nnyc accepts a wide variety of configuration arguments, run `nyc --help` for\r\nthorough documentation.\r\n\r\nConfiguration arguments should be provided prior to the program that nyc\r\nis executing. As an example, the following command executes `npm test`,\r\nand indicates to nyc that it should output both an `lcov`\r\nand a `text-lcov` coverage report.\r\n\r\n```shell\r\nnyc --reporter=lcov --reporter=text-lcov npm test\r\n```\r\n\r\n## Support For Custom Require Hooks (Babel! ES2015!)\r\n\r\nnyc supports custom require hooks like\r\n[`babel-register`](http://babeljs.io/docs/usage/require/). If necessary nyc can\r\nload the hooks for you, [using the `--require`\r\nflag](#require-additional-modules).\r\n\r\nSource maps are used to map coverage information back to the appropriate lines\r\nof the pre-transpiled code. You'll have to configure your custom require hook\r\nto inline the source map in the transpiled code. For Babel that means setting\r\nthe `sourceMaps` option to `inline`.\r\n\r\n## Checking Coverage\r\n\r\nnyc exposes istanbul's check-coverage tool. After running your tests with nyc,\r\nsimply run:\r\n\r\n```shell\r\nnyc check-coverage --lines 95 --functions 95 --branches 95\r\n```\r\n\r\nThis feature makes it easy to fail your tests if coverage drops below a given threshold.\r\n\r\nnyc also accepts a `--check-coverage` shorthand, which can be used to\r\nboth run tests and check that coverage falls within the threshold provided:\r\n\r\n```shell\r\nnyc --check-coverage --lines 100 npm test\r\n```\r\n\r\nThe above check fails if coverage falls below 100%.\r\n\r\n## Running Reports\r\n\r\nOnce you've run your tests with nyc, simply run:\r\n\r\n```bash\r\nnyc report\r\n```\r\n\r\nTo view your coverage report:\r\n\r\n<img width=\"500\" src=\"screen.png\">\r\n\r\nyou can use any reporters that are supported by istanbul:\r\n\r\n```bash\r\nnyc report --reporter=lcov\r\n```\r\n\r\n## Excluding Files\r\n\r\nYou can tell nyc to exclude specific files and directories by adding\r\nan `nyc.exclude` array to your `package.json`. Each element of\r\nthe array is a glob pattern indicating which paths should be omitted.\r\n\r\nGlobs are matched using [micromatch](https://www.npmjs.com/package/micromatch)\r\n\r\nIn addition to patterns specified in the package, nyc will always exclude\r\nfiles in `node_modules`.\r\n\r\nFor example, the following config will exclude everything in `node_modules`,\r\nany files with the extension `.spec.js`, and anything in the `build`\r\ndirectory:\r\n\r\n```json\r\n{\"nyc\": {\r\n  \"exclude\": [\r\n      \"**/*.spec.js\",\r\n      \"build\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n> Note: exclude defaults to `['test', 'test{,-*}.js']`, which would exclude\r\nthe `test` directory as well as `test.js` and `test-*.js` files\r\n\r\n## Including Files\r\n\r\nAs an alternative to providing a list of files to `exclude`, you can provide\r\nan `include` key to specify specific files that should be covered:\r\n\r\n```json\r\n{\"config\": {\r\n  \"nyc\": {\r\n    \"include\": [\"**/build/umd/moment.js\"]\r\n  }\r\n}}\r\n```\r\n\r\n> Note: include defaults to `['**']`\r\n\r\n## Include Reports For Files That Are Not Required\r\n\r\nBy default nyc does not collect coverage for files that have not\r\nbeen required, run nyc with the flag `--all` to enable this.\r\n\r\n## Require additional modules\r\n\r\nThe `--require` flag can be provided to `nyc` to indicate that additional\r\nmodules should be required in the subprocess collecting coverage:\r\n\r\n`nyc --require babel-core/register --require babel-polyfill mocha`\r\n\r\n## Caching\r\n\r\nYou can run `nyc` with the optional `--cache` flag, to prevent it from\r\ninstrumenting the same files multiple times. This can signficantly\r\nimprove runtime performance.\r\n\r\n## Configuring Istanbul\r\n\r\nBehind the scenes nyc uses [istanbul](https://www.npmjs.com/package/istanbul). You\r\ncan place a `.istanbul.yml` file in your project's root directory to pass config\r\nsetings to istanbul's code instrumenter:\r\n\r\n```yml\r\ninstrumentation:\r\n  preserve-comments: true\r\n```\r\n\r\n## Integrating With Coveralls\r\n\r\n[coveralls.io](https://coveralls.io) is a great tool for adding\r\ncoverage reports to your GitHub project. Here's how to get nyc\r\nintegrated with coveralls and travis-ci.org:\r\n\r\n1. add the coveralls and nyc dependencies to your module:\r\n\r\n```shell\r\nnpm install coveralls nyc --save\r\n```\r\n\r\n2. update the scripts in your package.json to include these bins:\r\n\r\n```bash\r\n{\r\n  \"script\": {\r\n    \"test\": \"nyc tap ./test/*.js\",\r\n    \"coverage\": \"nyc npm test && nyc report --reporter=text-lcov | coveralls\",\r\n  }\r\n}\r\n```\r\n\r\n3. For private repos, add the environment variable `COVERALLS_REPO_TOKEN` to travis.\r\n\r\n4. add the following to your `.travis.yml`:\r\n\r\n```yaml\r\nafter_success: npm run coverage\r\n```\r\n\r\nThat's all there is to it!\r\n\r\n> Note: by default coveralls.io adds comments to pull-requests on GitHub, this can feel intrusive. To disable this, click on your repo on coveralls.io and uncheck `LEAVE COMMENTS?`.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bcoe/nyc.git"
  },
  "scripts": {
    "build": "node ./build-tests",
    "clean": "rimraf ./.nyc_output ./node_modules/.cache ./.self_coverage ./test/fixtures/.nyc_output ./test/fixtures/node_modules/.cache *covered.js ./lib/*covered.js",
    "cover": "npm run clean && npm run build && npm run instrument && npm run run-tests && npm run report",
    "dev": "npm run clean && npm run build && npm run run-tests",
    "instrument": "node ./build-self-coverage.js",
    "pretest": "standard",
    "report": "istanbul report --include=./.self_coverage/*.json lcov text",
    "run-tests": "tap --no-cov -b ./test/build/*.js ./test/src/source-map-cache.js",
    "test": "npm run cover"
  },
  "standard": {
    "ignore": [
      "**/fixtures/**",
      "**/test/build/*"
    ]
  },
  "version": "5.3.0"
}
